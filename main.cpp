#include "DxLib.h"
#include "stdlib.h"
#include "time.h"
#include "math.h"

const char TITLE[] = "学籍番号名前：タイトル";

const int WIN_WIDTH = 1600; //ウィンドウ横幅//横画面全体は11200
const int WIN_HEIGHT = 896;//ウィンドウ縦幅


int WINAPI WinMain(_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR lpCmdLine, _In_ int nCmdShow)
{
	ChangeWindowMode(TRUE);						//ウィンドウモードに設定
	//ウィンドウサイズを手動では変更できず、かつウィンドウサイズに合わせて拡大できないようにする
	SetWindowSizeChangeEnableFlag(FALSE, FALSE);
	SetMainWindowText(TITLE);					// タイトルを変更
	SetGraphMode(WIN_WIDTH, WIN_HEIGHT, 32);	//画面サイズの最大サイズ、カラービット数を設定（モニターの解像度に合わせる）
	SetWindowSizeExtendRate(1.0);				//画面サイズを設定（解像度との比率で設定）
	SetBackgroundColor(0x00, 0x00, 0xFF);		// 画面の背景色を設定する

	//Dxライブラリの初期化
	if (DxLib_Init() == -1) { return -1; }

	//（ダブルバッファ）描画先グラフィック領域は裏面を指定
	SetDrawScreen(DX_SCREEN_BACK);

	//画像などのリソースデータの変数宣言と読み込み
	//プレイヤーの画像
	int Player = LoadGraph("char.png");
	//背景画像
	int Title = LoadGraph("Title2.png");
	int HaikeiX = 0;//背景画像のx座標
	int HaikeiY = 0;//背景画像のy座標
	int Haikei1 = LoadGraph("Haikei1 (2).png");//縦画面ステージの背景画像
	int Haikei2 = LoadGraph("Haikei2 (1).png");//横画面ステージの背景画像

	//ブロックや障害物の画像
	int Yuka1 = LoadGraph("Flooring1.png");//横画面ステージの床ブロック
	int Yuka2 = LoadGraph("Flooring2.png");//縦画面ステージの床ブロック
	int Kami = LoadGraph("Kamikuzu.png");//上から降ってくる障害物
	int Itokuzu = LoadGraph("Itokuzu.png");//踏んだらスロウになる障害物
	int Pencil1 = LoadGraph("Pencil.png");//棘の障害物(縦向き)
	int Pencil2 = LoadGraph("Pencil2.png");//棘の障害物(横向き(右))
	int Pencil3 = LoadGraph("Pencil3.png");//棘の障害物(横向き(左))
	int Banana = LoadGraph("Banana.png");//点数獲得のためのアイテム
	int Fukuro = LoadGraph("Kaifuku.png");//体力回復のためのアイテム
	int Memo = LoadGraph("memo.png");//ゴール前を示すメモ
	int Goal = LoadGraph("Goal.png");//ここに入ると次へ

	int BlockSize = 64;//一つのブロックの大きさ
	int EmySize = 64;//一つの障害物の大きさ
	int ScoreSize = 64;//一つのアイテムの大きさ
	int HeelSize = 64;//一つの回復アイテムの大きさ
	int UiSize = 64;//一つのUIの大きさ

	int BananaFlag = 1;//1の時バナナがある
	int Score = 0;//バナナの皮を取ったら100点加算

	//ゲームループで使う変数の宣言
	char keys[256] = { 0 }; //最新のキーボード情報用
	char oldkeys[256] = { 0 };//1ループ（フレーム）前のキーボード情報

	/*int PlX = 200;
	int	PlY = 799;
	int PlSize = 64;
	int PlR = 32;
	int OldPlX;
	int OldPlY;
	int red = GetColor(255, 0, 0);

	int JmpFlag = 0;
	int Jmp = -32;
	int jmpcount = 0;

	int Gravity = 0;
	int GravityFlag = 1;

	int mapWidth = 25;
	int mapHeight = 14;
	int mapSize = 64;

	int SIZE = 64;*/

	int graphHandle1;//敵画像用変数
	graphHandle1 = LoadGraph("char_stand.png");//画像の読み込み

	int graphHandle2;//敵画像用変数
	graphHandle2 = LoadGraph("char_walk.png");//画像の読み込み

	int graphHandle3;//敵画像用変数
	graphHandle3 = LoadGraph("char_stand2.png");//画像の読み込み

	int graphHandle4;//敵画像用変数
	graphHandle4 = LoadGraph("char_walk2.png");//画像の読み込み

	int graphHandle5;//敵画像用変数
	graphHandle5 = LoadGraph("char_stand3.png");//画像の読み込み

	int graphHandle6;//敵画像用変数
	graphHandle6 = LoadGraph("char_walk3.png");//画像の読み込み



	// ゲームループで使う変数の宣言
	int X = 50;
	int Y = 541;
	int Z = 64;
	int right = 1;//向き
	int left = 0;//向き
	float animationTimer = 0;
	int number = 0;
	float animationTimer2 = 0;
	int number2 = 0;
	int playeralive = 1;
	//0はダメージなし１は一回ダメージを受けている２は二回ダメージを受けている
	int damage = 0;
	//ダメージを受けた時のフラグ
	int DamageFlag = 0;
	//プレイヤーの座標を確保するための変数
	int Empty = 0;
	//隕石
	srand(time(NULL));
	/*int n = rand() % 1601;*/
	int n[10];
	int m[10];
	int l = 25;

	//隕石落下位置
	if (X == 80)
	{
		m[0] = m[0] + 1;
	}

	/*for (int i = 0;i < 10;i++)
	{
		n[i] = rand() % 1626 + 25;
	}
	for (int i = 0;i < 10;i++)
	{
		m[i] = -(rand() % +800 + 25);
	}*/

	//強制スクロールのためのスクロール座標
	int WorldposX = 0;
	int WorldposY = 0;

	enum Stage {
		KUUHAKU,//0
		FLOORING1,//1
		FLOORING2,//2
		PENCIL1,//3
		PENCIL2,//4
		PENCIL3,//5
		ITOKUZU,//6
		BANANA,//7
		FUKURO,//8
		MEMO,//9
		GOAL//10
	};

	//Map1[14][25]の七個分ぐらいの大きさ
	int Map1[14][175] = {

		  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,7,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,7,7,0,0,5,0,7,7,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		  {0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,5,0,7,7,0,0,5,0,7,7,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,10,0},
		  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
	};

	int Map1Height = sizeof(Map1) / sizeof(Map1[0]);//横画面ステージの縦の大きさ
	int Map1Width = sizeof(Map1[0]) / sizeof(Map1[0][0]);//横画面ステージの横の大きさ

	//Map2[25][14]の七個分ぐらいの大きさ
	int Map2[175][25] = {

		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0},
		{0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0},
		{0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,2,2,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0},
		{2,2,2,2,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,2,2,2,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0},
		{7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3},
		{0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2},
		{0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{7,7,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,5},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,2,2,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,2,2,0,0,0,7,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0},
		{0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7},
		{2,2,2,2,2,2,2,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{2,2,2,2,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{2,2,2,2,2,2,2,2,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0},
		{2,2,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0},
		{0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{3,3,3,2,0,0,0,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
		{2,2,2,2,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
		{0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0},
		{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
	};

	int Map2Height = sizeof(Map2) / sizeof(Map2[0]);//縦画面ステージの縦の大きさ
	int Map2Width = sizeof(Map2[0]) / sizeof(Map2[0][0]);//縦画面ステージの横の大きさ

	// ゲームループ
	while (1)
	{
		//最新のキーボード情報だったものは１フレーム前のキーボード情報として保存
		for (int i = 0; i < 256; i++)
		{
			oldkeys[i] = keys[i];
		}

		//最新のキーボード情報を取得
		GetHitKeyStateAll(keys);

		//画面クリア
		ClearDrawScreen();
		//---------  ここからプログラムを記述  ----------//
		//OldPlX = PlX;
		//OldPlY = PlY;
		////更新処理
		//if (keys[KEY_INPUT_RIGHT] == 1)
		//{
		//	PlX += 4;
		//}
		//if (keys[KEY_INPUT_LEFT] == 1)
		//{
		//	PlX -= 4;
		//}

		//int c1 = Map1[(PlY - 31) / SIZE][(PlX - 31) / SIZE];
		//int c2 = Map1[(PlY - 31) / SIZE][(PlX + 32) / SIZE];
		//int c3 = Map1[(PlY + 32) / SIZE][(PlX - 31) / SIZE];
		//int c4 = Map1[(PlY + 32) / SIZE][(PlX + 32) / SIZE];

		//if (JmpFlag == 0 && GravityFlag == 0)
		//{
		//	if (keys[KEY_INPUT_SPACE] == 1 && oldkeys[KEY_INPUT_SPACE] == 0)
		//	{
		//		JmpFlag = 1;
		//		Jmp = -32;
		//	}
		//}
		//else if (JmpFlag == 1)
		//{
		//	if (jmpcount <= 8)
		//	{
		//		PlY += Jmp;
		//		Jmp = Jmp + 2;
		//		jmpcount++;
		//	}
		//	else if (jmpcount > 8)
		//	{
		//		jmpcount = 0;
		//		JmpFlag = 0;
		//		GravityFlag = 1;
		//	}
		//}

		//for (int y = 0; y < 14; y++)
		//{
		//	for (int x = 0; x < 25; x++)
		//	{
		//		if (Map1[y][x] == FLOORING1)
		//		{
		//			if (y * SIZE < PlY + 32 && PlY - 31 < y * SIZE + 64)
		//			{
		//				if (x * SIZE < PlX + 32 && PlX - 31 < x * SIZE + 64)
		//				{
		//					PlX = OldPlX;
		//					PlY = OldPlY;
		//					GravityFlag = 0;
		//				}
		//			}
		//		}
		//	}
		//}

		//if (GravityFlag == 0)
		//{
		//	Gravity = 0;

		//}
		//else if (GravityFlag == 1)
		//{
		//	Gravity = Gravity + 2;
		//	PlY += Gravity;

		//}

		//強制スクロールの処理
		WorldposX = WorldposX + 3;
		WorldposY = WorldposY + 3;


		//横画面ステージの描画処理
		DrawGraph(HaikeiX, HaikeiY, Haikei1, TRUE);
		for (int y = 0; y < Map1Height; y++)//ステージの縦端まで繰り返す
		{
			for (int x = 0; x < Map1Width; x++)//ステージの横端まで繰り返す
			{
				////敵とぶつかったか
				////絶対値の宣言
				//int dis = (PlX - x * EmySize) * (PlX - x * EmySize) + (PlY - y * EmySize) * (PlY - y * EmySize);

				if (Map1[y][x] == FLOORING1)//マップチップの１の場所に描画
				{
					DrawGraph(x * BlockSize - WorldposX, y * BlockSize, Yuka1, TRUE);
				}
				if (Map1[y][x] == PENCIL1)//マップチップの３の場所に描画
				{
					//プレイヤーと障害物の判定
					if (DamageFlag == 0) {
						//ダメージを受けるたびに画像が差し変わる
						if (abs(X - (x * EmySize - WorldposX + 32)) < 80 && abs(Y - (y * EmySize + 64)) < 112)
						{
							damage += 1;
							DamageFlag = 1;
						}
					}
					//ダメージを受けるときの判定を連続で処理しないようにする
					if (DamageFlag == 1) {
						Empty = WorldposX;
						if (Empty + 128 < WorldposX)
						{
							DamageFlag = 0;
						}
					}
					DrawGraph(x * EmySize - WorldposX, y * EmySize, Pencil1, TRUE);
				}
				if (Map1[y][x] == PENCIL2)//マップチップの４の場所に描画
				{
					if (abs(X - (x * EmySize - WorldposX + 32)) < 80 && abs(Y - (y * EmySize + 64)) < 112)
					{
						damage += 1;
						DamageFlag = 1;
					}
					if (DamageFlag == 1) {
						Empty = WorldposX;
						if (Empty + 128 < WorldposX)
						{
							DamageFlag = 0;
						}
					}
					DrawGraph(x * EmySize - WorldposX, y * EmySize, Pencil2, TRUE);
				}
				if (Map1[y][x] == PENCIL3)//マップチップの５の場所に描画
				{
					if (abs(X - (x * EmySize - WorldposX + 32)) < 80 && abs(Y - (y * EmySize + 64)) < 112)
					{
						damage += 1;
						DamageFlag = 1;
					}
					if (DamageFlag == 1) {
						Empty = WorldposX;
						if (Empty + 128 < WorldposX)
						{
							DamageFlag = 0;
						}
					}
					DrawGraph(x * EmySize - WorldposX, y * EmySize, Pencil3, TRUE);
				}
				if (Map1[y][x] == ITOKUZU)//マップチップの６の場所に描画
				{
					DrawGraph(x * EmySize - WorldposX, y * EmySize, Itokuzu, TRUE);
				}


				if (Map1[y][x] == BANANA)//マップチップの７の場所に描画
				{
					
					//プレイヤーとバナナの皮の判定
					if (BananaFlag == 1) {
						if (abs(X - (x * ScoreSize - WorldposX + 32)) < 80 && abs(Y - (y * ScoreSize + 64)) < 112)
						{
							Map1[y][x] = 0;
							BananaFlag = 0;//0の時のフラグの処理へ
						}
					}

					DrawGraph(x * ScoreSize - WorldposX, y * ScoreSize, Banana, TRUE);
				}


				if (Map1[y][x] == FUKURO)//マップチップの８の場所に描画
				{
					//体力を増やすための判定
					//プレイヤーが当たってるとき
					if (DamageFlag == 0)
					{
						//アイテムと接触すると、現在の画像の前の画像に切り替わる
						if (abs(X - (x * HeelSize - WorldposX + 32)) < 80 && abs(Y - (y * HeelSize + 64)) < 112)
						{
							damage -= 1;
							DamageFlag = 1;
						}
					}
					//連続で処理をしないようにする
					if (DamageFlag == 1) {

						Empty = WorldposX;
						if (Empty + 128 < WorldposX)
						{
							DamageFlag = 0;
						}
					}
					DrawGraph(x * HeelSize - WorldposX, y * HeelSize, Fukuro, TRUE);
				}

				if (Map1[y][x] == MEMO)//マップチップの９の場所に描画
				{
					DrawGraph(x * BlockSize - WorldposX, y * BlockSize, Memo, TRUE);
				}
				if (Map1[y][x] == GOAL)//マップチップの１０の場所に描画
				{
					//接触すると次のステージへ
					if (abs(X - (x * HeelSize - WorldposX + 32)) < 80 && abs(Y - (y * HeelSize + 64)) < 112)
					{
						
						DrawGraph(x * BlockSize - WorldposX, y * BlockSize, Goal, TRUE);
					}
				}
			}
		}

		//バナナの皮を取得すると+100点
		if (BananaFlag == 0) {
			Score = Score + 100;
			//得点が増え続けるのを防ぐ
			BananaFlag = 1;
		}

		DrawFormatString(0, 0, GetColor(255, 255, 255), "%d", Score);

		//キャラクター移動
		if (keys[KEY_INPUT_RIGHT] == 1)
		{
			X = X + 3;
			right = 1;
			left = 0;

		}

		if (keys[KEY_INPUT_LEFT] == 1)
		{
			X = X - 2;
			right = 0;
			left = 1;
		}

		if (keys[KEY_INPUT_UP] == 1)
		{
			Y = Y - 2;
		}
		if (keys[KEY_INPUT_DOWN] == 1)
		{
			Y = Y + 2;
		}



		/*for (int i = 0;i < 10;i++)
		{
			m[i] = m[i] + 10;
		}*/

		//隕石の衝突判定
		/*for (int i = 0;i < 10;i++)
		{
			if ((n[i] - l - l) >= (x - z) && m[i] >= (y - z))
			{
				playeralive = 0;
			}
		}*/


		//アニメーション処理
		animationTimer += 0.3;
		if (animationTimer > 2)
		{
			number = number + 1;
			if (number == 2)
			{
				number = 0;
			}

			animationTimer = 0;
		}

		animationTimer2 += 0.3;
		if (animationTimer2 > 2)
		{
			number2 = number2 + 1;
			if (number2 == 2)
			{
				number2 = 0;
			}

			animationTimer2 = 0;
		}
		// 描画処理

		//ダメージを受けていない時の画像
		if (damage == 0)
		{

			if (keys[KEY_INPUT_RIGHT] == 0 && right == 1)//右立ち
			{
				DrawRectGraph(X - Z, Y - Z, number * 128, 0, 128, 128, graphHandle1, true, true);
			}
			if (keys[KEY_INPUT_RIGHT] == 1 && right == 1)//右歩き
			{
				DrawRectGraph(X - Z, Y - Z, number2 * 128, 0, 128, 128, graphHandle2, true, true);
			}

			if (keys[KEY_INPUT_LEFT] == 0 && left == 1)//左立ち
			{
				DrawRectGraph(X - Z, Y - Z, number * 128, 0, 128, 128, graphHandle1, true, FALSE);
			}
			if (keys[KEY_INPUT_LEFT] == 1 && left == 1)//左歩き
			{
				DrawRectGraph(X - Z, Y - Z, number2 * 128, 0, 128, 128, graphHandle2, true, FALSE);
			}
		}

		//ダメージを１回受けた時の画像
		if (damage == 1)
		{
			if (keys[KEY_INPUT_RIGHT] == 0 && right == 1)//右立ち
			{
				DrawRectGraph(X - Z, Y - Z, number * 128, 0, 128, 128, graphHandle3, true, true);
			}
			if (keys[KEY_INPUT_RIGHT] == 1 && right == 1)//右歩き
			{
				DrawRectGraph(X - Z, Y - Z, number2 * 128, 0, 128, 128, graphHandle4, true, true);
			}

			if (keys[KEY_INPUT_LEFT] == 0 && left == 1)//右立ち
			{
				DrawRectGraph(X - Z, Y - Z, number * 128, 0, 128, 128, graphHandle3, true, true);
			}
			if (keys[KEY_INPUT_LEFT] == 1 && left == 1)//右歩き
			{
				DrawRectGraph(X - Z, Y - Z, number2 * 128, 0, 128, 128, graphHandle4, true, true);
			}

		}

		//ダメージを2回受けた時の画像
		if (damage == 2)
		{
			if (keys[KEY_INPUT_RIGHT] == 0 && right == 1)//右立ち
			{
				DrawRectGraph(X - Z, Y - Z, number * 128, 0, 128, 128, graphHandle5, true, true);
			}
			if (keys[KEY_INPUT_RIGHT] == 1 && right == 1)//右歩き
			{
				DrawRectGraph(X - Z, Y - Z, number2 * 128, 0, 128, 128, graphHandle6, true, true);
			}

			if (keys[KEY_INPUT_LEFT] == 0 && left == 1)//左立ち
			{
				DrawRectGraph(X - Z, Y - Z, number * 128, 0, 128, 128, graphHandle5, true, true);
			}
			if (keys[KEY_INPUT_LEFT] == 1 && left == 1)//左歩き
			{
				DrawRectGraph(X - Z, Y - Z, number2 * 128, 0, 128, 128, graphHandle6, true, true);
			}
		}

		for (int i = 0; i < 10; i++)//隕石画像
		{
			DrawBox(n[i] - l - l, m[i] - l - l, n[i], m[i], GetColor(255, 255, 0), true);
		}

		//縦画面ステージの描画処理
		DrawGraph(HaikeiX, HaikeiY, Haikei2, TRUE);
		for (int y = 0; y < Map2Height; y++)//ステージの縦端まで繰り返す
		{
			for (int x = 0; x < Map2Width; x++)//ステージの横端まで繰り返す
			{
				if (Map2[y][x] == FLOORING2)//マップチップの２の場所に描画
				{
					DrawGraph(x * BlockSize, y * BlockSize - WorldposY, Yuka2, TRUE);
				}
				if (Map2[y][x] == PENCIL1)//マップチップの３の場所に描画
				{
					if (abs(X - (x * EmySize + 32)) < 80 && abs(Y - (y * EmySize - WorldposY + 64)) < 112)
					{
						damage += 1;
						DamageFlag = 1;
					}
					if (DamageFlag == 1) {
						Empty = WorldposY;
						if (Empty + 128 < WorldposY)
						{
							DamageFlag = 0;
						}
					}
					DrawGraph(x * EmySize, y * EmySize - WorldposY, Pencil1, TRUE);
				}
				if (Map2[y][x] == PENCIL2)//マップチップの４の場所に描画
				{
					if (abs(X - (x * EmySize + 32)) < 80 && abs(Y - (y * EmySize - WorldposY + 64)) < 112)
					{
						damage += 1;
						DamageFlag = 1;
					}
					if (DamageFlag == 1) {
						Empty = WorldposY;
						if (Empty + 128 < WorldposY)
						{
							DamageFlag = 0;
						}
					}
					DrawGraph(x * EmySize, y * EmySize - WorldposY, Pencil2, TRUE);
				}
				if (Map2[y][x] == PENCIL3)//マップチップの５の場所に描画
				{
					if (abs(X - (x * EmySize + 32)) < 80 && abs(Y - (y * EmySize - WorldposY + 64)) < 112)
					{
						damage += 1;
						DamageFlag = 1;
					}
					if (DamageFlag == 1) {
						Empty = WorldposY;
						if (Empty + 128 < WorldposY)
						{
							DamageFlag = 0;
						}
					}
					DrawGraph(x * EmySize, y * EmySize - WorldposY, Pencil3, TRUE);
				}
				if (Map2[y][x] == ITOKUZU)//マップチップの６の場所に描画
				{
					DrawGraph(x * EmySize, y * EmySize - WorldposY, Itokuzu, TRUE);
				}
				if (Map2[y][x] == BANANA)//マップチップの７の場所に描画
				{
					DrawGraph(x * ScoreSize, y * ScoreSize - WorldposY, Banana, TRUE);
				}
				if (Map2[y][x] == FUKURO)//マップチップの８の場所に描画
				{
					if (abs(X - (x * HeelSize + 32)) < 80 && abs(Y - (y * HeelSize - WorldposY + 64)) < 112)
					{

					}
					DrawGraph(x * HeelSize, y * HeelSize - WorldposY, Fukuro, TRUE);
				}
				if (Map2[y][x] == MEMO)//マップチップの９の場所に描画
				{
					DrawGraph(x * BlockSize, y * BlockSize - WorldposY, Memo, TRUE);
				}
				if (Map2[y][x] == GOAL)//マップチップの１０の場所に描画
				{
					if (abs(X - (x * BlockSize + 32)) < 80 && abs(Y - (y * BlockSize - WorldposY + 64)) < 112)
					{

					}
					DrawGraph(x * BlockSize, y * BlockSize - WorldposY, Goal, TRUE);
				}
			}
		}

		/*//プレイヤーの描画
		DrawGraph(PlX, PlY, Player, TRUE);*/

		//---------  ここまでにプログラムを記述  ---------//
		ScreenFlip();//（ダブルバッファ）裏面
		// 20ミリ秒待機（疑似60FPS）
		WaitTimer(20);
		// Windows システムからくる情報を処理する
		if (ProcessMessage() == -1)
		{
			break;
		}
		// ＥＳＣキーが押されたらループから抜ける
		if (CheckHitKey(KEY_INPUT_ESCAPE) == 1)
		{
			break;
		}
	}
	//Dxライブラリ終了処理
	DxLib_End();

	return 0;
}